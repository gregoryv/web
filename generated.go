package web

// generated by internal/dog.go

// A returns an <a> element with optional children or attributes
func A(c ...interface{}) *Element {
	return NewElement("a", c...)
}

// Abbr returns an <abbr> element with optional children or attributes
func Abbr(c ...interface{}) *Element {
	return NewElement("abbr", c...)
}

// Acronym returns an <acronym> element with optional children or attributes
func Acronym(c ...interface{}) *Element {
	return NewElement("acronym", c...)
}

// Address returns an <address> element with optional children or attributes
func Address(c ...interface{}) *Element {
	return NewElement("address", c...)
}

// Article returns an <article> element with optional children or attributes
func Article(c ...interface{}) *Element {
	return NewElement("article", c...)
}

// Aside returns an <aside> element with optional children or attributes
func Aside(c ...interface{}) *Element {
	return NewElement("aside", c...)
}

// B returns an <b> element with optional children or attributes
func B(c ...interface{}) *Element {
	return NewElement("b", c...)
}

// Big returns an <big> element with optional children or attributes
func Big(c ...interface{}) *Element {
	return NewElement("big", c...)
}

// Blockquote returns an <blockquote> element with optional children or attributes
func Blockquote(c ...interface{}) *Element {
	return NewElement("blockquote", c...)
}

// Body returns an <body> element with optional children or attributes
func Body(c ...interface{}) *Element {
	return NewElement("body", c...)
}

// Button returns an <button> element with optional children or attributes
func Button(c ...interface{}) *Element {
	return NewElement("button", c...)
}

// Cite returns an <cite> element with optional children or attributes
func Cite(c ...interface{}) *Element {
	return NewElement("cite", c...)
}

// Code returns an <code> element with optional children or attributes
func Code(c ...interface{}) *Element {
	return NewElement("code", c...)
}

// Dd returns an <dd> element with optional children or attributes
func Dd(c ...interface{}) *Element {
	return NewElement("dd", c...)
}

// Del returns an <del> element with optional children or attributes
func Del(c ...interface{}) *Element {
	return NewElement("del", c...)
}

// Details returns an <details> element with optional children or attributes
func Details(c ...interface{}) *Element {
	return NewElement("details", c...)
}

// Dfn returns an <dfn> element with optional children or attributes
func Dfn(c ...interface{}) *Element {
	return NewElement("dfn", c...)
}

// Div returns an <div> element with optional children or attributes
func Div(c ...interface{}) *Element {
	return NewElement("div", c...)
}

// Dl returns an <dl> element with optional children or attributes
func Dl(c ...interface{}) *Element {
	return NewElement("dl", c...)
}

// Dt returns an <dt> element with optional children or attributes
func Dt(c ...interface{}) *Element {
	return NewElement("dt", c...)
}

// Em returns an <em> element with optional children or attributes
func Em(c ...interface{}) *Element {
	return NewElement("em", c...)
}

// Footer returns an <footer> element with optional children or attributes
func Footer(c ...interface{}) *Element {
	return NewElement("footer", c...)
}

// Form returns an <form> element with optional children or attributes
func Form(c ...interface{}) *Element {
	return NewElement("form", c...)
}

// Fieldset returns an <fieldset> element with optional children or attributes
func Fieldset(c ...interface{}) *Element {
	return NewElement("fieldset", c...)
}

// H1 returns an <h1> element with optional children or attributes
func H1(c ...interface{}) *Element {
	return NewElement("h1", c...)
}

// H2 returns an <h2> element with optional children or attributes
func H2(c ...interface{}) *Element {
	return NewElement("h2", c...)
}

// H3 returns an <h3> element with optional children or attributes
func H3(c ...interface{}) *Element {
	return NewElement("h3", c...)
}

// H4 returns an <h4> element with optional children or attributes
func H4(c ...interface{}) *Element {
	return NewElement("h4", c...)
}

// H5 returns an <h5> element with optional children or attributes
func H5(c ...interface{}) *Element {
	return NewElement("h5", c...)
}

// H6 returns an <h6> element with optional children or attributes
func H6(c ...interface{}) *Element {
	return NewElement("h6", c...)
}

// Head returns an <head> element with optional children or attributes
func Head(c ...interface{}) *Element {
	return NewElement("head", c...)
}

// Header returns an <header> element with optional children or attributes
func Header(c ...interface{}) *Element {
	return NewElement("header", c...)
}

// Hgroup returns an <hgroup> element with optional children or attributes
func Hgroup(c ...interface{}) *Element {
	return NewElement("hgroup", c...)
}

// Html returns an <html> element with optional children or attributes
func Html(c ...interface{}) *Element {
	return NewElement("html", c...)
}

// I returns an <i> element with optional children or attributes
func I(c ...interface{}) *Element {
	return NewElement("i", c...)
}

// Ins returns an <ins> element with optional children or attributes
func Ins(c ...interface{}) *Element {
	return NewElement("ins", c...)
}

// Kbd returns an <kbd> element with optional children or attributes
func Kbd(c ...interface{}) *Element {
	return NewElement("kbd", c...)
}

// Label returns an <label> element with optional children or attributes
func Label(c ...interface{}) *Element {
	return NewElement("label", c...)
}

// Legend returns an <legend> element with optional children or attributes
func Legend(c ...interface{}) *Element {
	return NewElement("legend", c...)
}

// Li returns an <li> element with optional children or attributes
func Li(c ...interface{}) *Element {
	return NewElement("li", c...)
}

// Mark returns an <mark> element with optional children or attributes
func Mark(c ...interface{}) *Element {
	return NewElement("mark", c...)
}

// Menu returns an <menu> element with optional children or attributes
func Menu(c ...interface{}) *Element {
	return NewElement("menu", c...)
}

// Meter returns an <meter> element with optional children or attributes
func Meter(c ...interface{}) *Element {
	return NewElement("meter", c...)
}

// Nav returns an <nav> element with optional children or attributes
func Nav(c ...interface{}) *Element {
	return NewElement("nav", c...)
}

// Noscript returns an <noscript> element with optional children or attributes
func Noscript(c ...interface{}) *Element {
	return NewElement("noscript", c...)
}

// Ol returns an <ol> element with optional children or attributes
func Ol(c ...interface{}) *Element {
	return NewElement("ol", c...)
}

// Optgroup returns an <optgroup> element with optional children or attributes
func Optgroup(c ...interface{}) *Element {
	return NewElement("optgroup", c...)
}

// Option returns an <option> element with optional children or attributes
func Option(c ...interface{}) *Element {
	return NewElement("option", c...)
}

// Output returns an <output> element with optional children or attributes
func Output(c ...interface{}) *Element {
	return NewElement("output", c...)
}

// P returns an <p> element with optional children or attributes
func P(c ...interface{}) *Element {
	return NewElement("p", c...)
}

// Pre returns an <pre> element with optional children or attributes
func Pre(c ...interface{}) *Element {
	return NewElement("pre", c...)
}

// Quote returns an <quote> element with optional children or attributes
func Quote(c ...interface{}) *Element {
	return NewElement("quote", c...)
}

// Script returns an <script> element with optional children or attributes
func Script(c ...interface{}) *Element {
	return NewElement("script", c...)
}

// Section returns an <section> element with optional children or attributes
func Section(c ...interface{}) *Element {
	return NewElement("section", c...)
}

// Select returns an <select> element with optional children or attributes
func Select(c ...interface{}) *Element {
	return NewElement("select", c...)
}

// Span returns an <span> element with optional children or attributes
func Span(c ...interface{}) *Element {
	return NewElement("span", c...)
}

// Style returns an <style> element with optional children or attributes
func Style(c ...interface{}) *Element {
	return NewElement("style", c...)
}

// Sub returns an <sub> element with optional children or attributes
func Sub(c ...interface{}) *Element {
	return NewElement("sub", c...)
}

// Summary returns an <summary> element with optional children or attributes
func Summary(c ...interface{}) *Element {
	return NewElement("summary", c...)
}

// Sup returns an <sup> element with optional children or attributes
func Sup(c ...interface{}) *Element {
	return NewElement("sup", c...)
}

// Table returns an <table> element with optional children or attributes
func Table(c ...interface{}) *Element {
	return NewElement("table", c...)
}

// Tbody returns an <tbody> element with optional children or attributes
func Tbody(c ...interface{}) *Element {
	return NewElement("tbody", c...)
}

// Td returns an <td> element with optional children or attributes
func Td(c ...interface{}) *Element {
	return NewElement("td", c...)
}

// Textarea returns an <textarea> element with optional children or attributes
func Textarea(c ...interface{}) *Element {
	return NewElement("textarea", c...)
}

// Th returns an <th> element with optional children or attributes
func Th(c ...interface{}) *Element {
	return NewElement("th", c...)
}

// Thead returns an <thead> element with optional children or attributes
func Thead(c ...interface{}) *Element {
	return NewElement("thead", c...)
}

// Title returns an <title> element with optional children or attributes
func Title(c ...interface{}) *Element {
	return NewElement("title", c...)
}

// Tr returns an <tr> element with optional children or attributes
func Tr(c ...interface{}) *Element {
	return NewElement("tr", c...)
}

// U returns an <u> element with optional children or attributes
func U(c ...interface{}) *Element {
	return NewElement("u", c...)
}

// Ul returns an <ul> element with optional children or attributes
func Ul(c ...interface{}) *Element {
	return NewElement("ul", c...)
}

// Var returns an <var> element with optional children or attributes
func Var(c ...interface{}) *Element {
	return NewElement("var", c...)
}

// Base returns a <base/> element with optional attributes
func Base(c ...interface{}) *Element {
	return NewSimpleElement("base", c...)
}

// Br returns a <br/> element with optional attributes
func Br(c ...interface{}) *Element {
	return NewSimpleElement("br", c...)
}

// Hr returns a <hr/> element with optional attributes
func Hr(c ...interface{}) *Element {
	return NewSimpleElement("hr", c...)
}

// Img returns a <img/> element with optional attributes
func Img(c ...interface{}) *Element {
	return NewSimpleElement("img", c...)
}

// Input returns a <input/> element with optional attributes
func Input(c ...interface{}) *Element {
	return NewSimpleElement("input", c...)
}

// Keygen returns a <keygen/> element with optional attributes
func Keygen(c ...interface{}) *Element {
	return NewSimpleElement("keygen", c...)
}

// Link returns a <link/> element with optional attributes
func Link(c ...interface{}) *Element {
	return NewSimpleElement("link", c...)
}

// Meta returns a <meta/> element with optional attributes
func Meta(c ...interface{}) *Element {
	return NewSimpleElement("meta", c...)
}

// Action returns a action="v" attribute
func Action(v string) *Attribute { return &Attribute{Name: "action", Val: v} }

// Alt returns a alt="v" attribute
func Alt(v string) *Attribute { return &Attribute{Name: "alt", Val: v} }

// Autocomplete returns a autocomplete="v" attribute
func Autocomplete(v string) *Attribute { return &Attribute{Name: "autocomplete", Val: v} }

// Charset returns a charset="v" attribute
func Charset(v string) *Attribute { return &Attribute{Name: "charset", Val: v} }

// Class returns a class="v" attribute
func Class(v string) *Attribute { return &Attribute{Name: "class", Val: v} }

// Content returns a content="v" attribute
func Content(v string) *Attribute { return &Attribute{Name: "content", Val: v} }

// Href returns a href="v" attribute
func Href(v string) *Attribute { return &Attribute{Name: "href", Val: v} }

// Id returns a id="v" attribute
func Id(v string) *Attribute { return &Attribute{Name: "id", Val: v} }

// Lang returns a lang="v" attribute
func Lang(v string) *Attribute { return &Attribute{Name: "lang", Val: v} }

// Method returns a method="v" attribute
func Method(v string) *Attribute { return &Attribute{Name: "method", Val: v} }

// Name returns a name="v" attribute
func Name(v string) *Attribute { return &Attribute{Name: "name", Val: v} }

// Rel returns a rel="v" attribute
func Rel(v string) *Attribute { return &Attribute{Name: "rel", Val: v} }

// Src returns a src="v" attribute
func Src(v string) *Attribute { return &Attribute{Name: "src", Val: v} }

// Tabindex returns a tabindex="v" attribute
func Tabindex(v string) *Attribute { return &Attribute{Name: "tabindex", Val: v} }

// Type returns a type="v" attribute
func Type(v string) *Attribute { return &Attribute{Name: "type", Val: v} }

// Value returns a value="v" attribute
func Value(v string) *Attribute { return &Attribute{Name: "value", Val: v} }

// OnBlur returns a onBlur="v" attribute
func OnBlur(v string) *Attribute { return &Attribute{Name: "onBlur", Val: v} }

// OnFocus returns a onFocus="v" attribute
func OnFocus(v string) *Attribute { return &Attribute{Name: "onFocus", Val: v} }

// OnLoad returns a onLoad="v" attribute
func OnLoad(v string) *Attribute { return &Attribute{Name: "onLoad", Val: v} }

// OnMouseDown returns a onMouseDown="v" attribute
func OnMouseDown(v string) *Attribute { return &Attribute{Name: "onMouseDown", Val: v} }

// OnMouseOut returns a onMouseOut="v" attribute
func OnMouseOut(v string) *Attribute { return &Attribute{Name: "onMouseOut", Val: v} }

// OnMouseOver returns a onMouseOver="v" attribute
func OnMouseOver(v string) *Attribute { return &Attribute{Name: "onMouseOver", Val: v} }

// OnMouseUp returns a onMouseUp="v" attribute
func OnMouseUp(v string) *Attribute { return &Attribute{Name: "onMouseUp", Val: v} }

// OnMouseWheel returns a onMouseWheel="v" attribute
func OnMouseWheel(v string) *Attribute { return &Attribute{Name: "onMouseWheel", Val: v} }
