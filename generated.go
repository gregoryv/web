package web

// generated by internal/dog.go

// A returns a <a> element with optional children or attributes
func A(c ...interface{}) *Element {
	return NewElement("a", c...)
}

// Abbr returns a <abbr> element with optional children or attributes
func Abbr(c ...interface{}) *Element {
	return NewElement("abbr", c...)
}

// Acronym returns a <acronym> element with optional children or attributes
func Acronym(c ...interface{}) *Element {
	return NewElement("acronym", c...)
}

// Address returns a <address> element with optional children or attributes
func Address(c ...interface{}) *Element {
	return NewElement("address", c...)
}

// Article returns a <article> element with optional children or attributes
func Article(c ...interface{}) *Element {
	return NewElement("article", c...)
}

// Aside returns a <aside> element with optional children or attributes
func Aside(c ...interface{}) *Element {
	return NewElement("aside", c...)
}

// B returns a <b> element with optional children or attributes
func B(c ...interface{}) *Element {
	return NewElement("b", c...)
}

// Big returns a <big> element with optional children or attributes
func Big(c ...interface{}) *Element {
	return NewElement("big", c...)
}

// Blockquote returns a <blockquote> element with optional children or attributes
func Blockquote(c ...interface{}) *Element {
	return NewElement("blockquote", c...)
}

// Body returns a <body> element with optional children or attributes
func Body(c ...interface{}) *Element {
	return NewElement("body", c...)
}

// Button returns a <button> element with optional children or attributes
func Button(c ...interface{}) *Element {
	return NewElement("button", c...)
}

// Cite returns a <cite> element with optional children or attributes
func Cite(c ...interface{}) *Element {
	return NewElement("cite", c...)
}

// Code returns a <code> element with optional children or attributes
func Code(c ...interface{}) *Element {
	return NewElement("code", c...)
}

// Dd returns a <dd> element with optional children or attributes
func Dd(c ...interface{}) *Element {
	return NewElement("dd", c...)
}

// Del returns a <del> element with optional children or attributes
func Del(c ...interface{}) *Element {
	return NewElement("del", c...)
}

// Details returns a <details> element with optional children or attributes
func Details(c ...interface{}) *Element {
	return NewElement("details", c...)
}

// Dfn returns a <dfn> element with optional children or attributes
func Dfn(c ...interface{}) *Element {
	return NewElement("dfn", c...)
}

// Div returns a <div> element with optional children or attributes
func Div(c ...interface{}) *Element {
	return NewElement("div", c...)
}

// Dl returns a <dl> element with optional children or attributes
func Dl(c ...interface{}) *Element {
	return NewElement("dl", c...)
}

// Dt returns a <dt> element with optional children or attributes
func Dt(c ...interface{}) *Element {
	return NewElement("dt", c...)
}

// Footer returns a <footer> element with optional children or attributes
func Footer(c ...interface{}) *Element {
	return NewElement("footer", c...)
}

// Form returns a <form> element with optional children or attributes
func Form(c ...interface{}) *Element {
	return NewElement("form", c...)
}

// H1 returns a <h1> element with optional children or attributes
func H1(c ...interface{}) *Element {
	return NewElement("h1", c...)
}

// H2 returns a <h2> element with optional children or attributes
func H2(c ...interface{}) *Element {
	return NewElement("h2", c...)
}

// H3 returns a <h3> element with optional children or attributes
func H3(c ...interface{}) *Element {
	return NewElement("h3", c...)
}

// H4 returns a <h4> element with optional children or attributes
func H4(c ...interface{}) *Element {
	return NewElement("h4", c...)
}

// H5 returns a <h5> element with optional children or attributes
func H5(c ...interface{}) *Element {
	return NewElement("h5", c...)
}

// H6 returns a <h6> element with optional children or attributes
func H6(c ...interface{}) *Element {
	return NewElement("h6", c...)
}

// Head returns a <head> element with optional children or attributes
func Head(c ...interface{}) *Element {
	return NewElement("head", c...)
}

// Header returns a <header> element with optional children or attributes
func Header(c ...interface{}) *Element {
	return NewElement("header", c...)
}

// Hgroup returns a <hgroup> element with optional children or attributes
func Hgroup(c ...interface{}) *Element {
	return NewElement("hgroup", c...)
}

// Html returns a <html> element with optional children or attributes
func Html(c ...interface{}) *Element {
	return NewElement("html", c...)
}

// I returns a <i> element with optional children or attributes
func I(c ...interface{}) *Element {
	return NewElement("i", c...)
}

// Ins returns a <ins> element with optional children or attributes
func Ins(c ...interface{}) *Element {
	return NewElement("ins", c...)
}

// Kbd returns a <kbd> element with optional children or attributes
func Kbd(c ...interface{}) *Element {
	return NewElement("kbd", c...)
}

// Label returns a <label> element with optional children or attributes
func Label(c ...interface{}) *Element {
	return NewElement("label", c...)
}

// Legend returns a <legend> element with optional children or attributes
func Legend(c ...interface{}) *Element {
	return NewElement("legend", c...)
}

// Li returns a <li> element with optional children or attributes
func Li(c ...interface{}) *Element {
	return NewElement("li", c...)
}

// Mark returns a <mark> element with optional children or attributes
func Mark(c ...interface{}) *Element {
	return NewElement("mark", c...)
}

// Menu returns a <menu> element with optional children or attributes
func Menu(c ...interface{}) *Element {
	return NewElement("menu", c...)
}

// Meter returns a <meter> element with optional children or attributes
func Meter(c ...interface{}) *Element {
	return NewElement("meter", c...)
}

// Nav returns a <nav> element with optional children or attributes
func Nav(c ...interface{}) *Element {
	return NewElement("nav", c...)
}

// Noscript returns a <noscript> element with optional children or attributes
func Noscript(c ...interface{}) *Element {
	return NewElement("noscript", c...)
}

// Ol returns a <ol> element with optional children or attributes
func Ol(c ...interface{}) *Element {
	return NewElement("ol", c...)
}

// Optgroup returns a <optgroup> element with optional children or attributes
func Optgroup(c ...interface{}) *Element {
	return NewElement("optgroup", c...)
}

// Option returns a <option> element with optional children or attributes
func Option(c ...interface{}) *Element {
	return NewElement("option", c...)
}

// Output returns a <output> element with optional children or attributes
func Output(c ...interface{}) *Element {
	return NewElement("output", c...)
}

// P returns a <p> element with optional children or attributes
func P(c ...interface{}) *Element {
	return NewElement("p", c...)
}

// Pre returns a <pre> element with optional children or attributes
func Pre(c ...interface{}) *Element {
	return NewElement("pre", c...)
}

// Quote returns a <quote> element with optional children or attributes
func Quote(c ...interface{}) *Element {
	return NewElement("quote", c...)
}

// Script returns a <script> element with optional children or attributes
func Script(c ...interface{}) *Element {
	return NewElement("script", c...)
}

// Section returns a <section> element with optional children or attributes
func Section(c ...interface{}) *Element {
	return NewElement("section", c...)
}

// Select returns a <select> element with optional children or attributes
func Select(c ...interface{}) *Element {
	return NewElement("select", c...)
}

// Span returns a <span> element with optional children or attributes
func Span(c ...interface{}) *Element {
	return NewElement("span", c...)
}

// Style returns a <style> element with optional children or attributes
func Style(c ...interface{}) *Element {
	return NewElement("style", c...)
}

// Sub returns a <sub> element with optional children or attributes
func Sub(c ...interface{}) *Element {
	return NewElement("sub", c...)
}

// Summary returns a <summary> element with optional children or attributes
func Summary(c ...interface{}) *Element {
	return NewElement("summary", c...)
}

// Sup returns a <sup> element with optional children or attributes
func Sup(c ...interface{}) *Element {
	return NewElement("sup", c...)
}

// Table returns a <table> element with optional children or attributes
func Table(c ...interface{}) *Element {
	return NewElement("table", c...)
}

// Tbody returns a <tbody> element with optional children or attributes
func Tbody(c ...interface{}) *Element {
	return NewElement("tbody", c...)
}

// Td returns a <td> element with optional children or attributes
func Td(c ...interface{}) *Element {
	return NewElement("td", c...)
}

// Textarea returns a <textarea> element with optional children or attributes
func Textarea(c ...interface{}) *Element {
	return NewElement("textarea", c...)
}

// Th returns a <th> element with optional children or attributes
func Th(c ...interface{}) *Element {
	return NewElement("th", c...)
}

// Thead returns a <thead> element with optional children or attributes
func Thead(c ...interface{}) *Element {
	return NewElement("thead", c...)
}

// Title returns a <title> element with optional children or attributes
func Title(c ...interface{}) *Element {
	return NewElement("title", c...)
}

// Tr returns a <tr> element with optional children or attributes
func Tr(c ...interface{}) *Element {
	return NewElement("tr", c...)
}

// U returns a <u> element with optional children or attributes
func U(c ...interface{}) *Element {
	return NewElement("u", c...)
}

// Ul returns a <ul> element with optional children or attributes
func Ul(c ...interface{}) *Element {
	return NewElement("ul", c...)
}

// Var returns a <var> element with optional children or attributes
func Var(c ...interface{}) *Element {
	return NewElement("var", c...)
}

// Base returns a <base/> element with optional attributes
func Base(c ...interface{}) *Element {
	return NewSimpleElement("base", c...)
}

// Br returns a <br/> element with optional attributes
func Br(c ...interface{}) *Element {
	return NewSimpleElement("br", c...)
}

// Hr returns a <hr/> element with optional attributes
func Hr(c ...interface{}) *Element {
	return NewSimpleElement("hr", c...)
}

// Img returns a <img/> element with optional attributes
func Img(c ...interface{}) *Element {
	return NewSimpleElement("img", c...)
}

// Input returns a <input/> element with optional attributes
func Input(c ...interface{}) *Element {
	return NewSimpleElement("input", c...)
}

// Keygen returns a <keygen/> element with optional attributes
func Keygen(c ...interface{}) *Element {
	return NewSimpleElement("keygen", c...)
}

// Link returns a <link/> element with optional attributes
func Link(c ...interface{}) *Element {
	return NewSimpleElement("link", c...)
}

// Meta returns a <meta/> element with optional attributes
func Meta(c ...interface{}) *Element {
	return NewSimpleElement("meta", c...)
}

// Charset returns a charset="v" attribute
func Charset(v string) *Attribute { return &Attribute{Name: "charset", Val: v} }

// Class returns a class="v" attribute
func Class(v string) *Attribute { return &Attribute{Name: "class", Val: v} }

// Content returns a content="v" attribute
func Content(v string) *Attribute { return &Attribute{Name: "content", Val: v} }

// Href returns a href="v" attribute
func Href(v string) *Attribute { return &Attribute{Name: "href", Val: v} }

// Id returns a id="v" attribute
func Id(v string) *Attribute { return &Attribute{Name: "id", Val: v} }

// Lang returns a lang="v" attribute
func Lang(v string) *Attribute { return &Attribute{Name: "lang", Val: v} }

// Name returns a name="v" attribute
func Name(v string) *Attribute { return &Attribute{Name: "name", Val: v} }

// Rel returns a rel="v" attribute
func Rel(v string) *Attribute { return &Attribute{Name: "rel", Val: v} }

// Src returns a src="v" attribute
func Src(v string) *Attribute { return &Attribute{Name: "src", Val: v} }

// Type returns a type="v" attribute
func Type(v string) *Attribute { return &Attribute{Name: "type", Val: v} }
