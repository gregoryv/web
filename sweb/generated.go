package sweb

// generated by internal/dog.go
import "github.com/gregoryv/web"

// A_ same as A but also ends the element
func A_(c ...interface{}) *web.Element {
	A(c...)
	return EndA()
}

// A adds an <a> element to current parent with optional children or attributes
func A(c ...interface{}) {
	v := web.NewElement("a", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndA() *web.Element { return end("a") }

// Abbr_ same as Abbr but also ends the element
func Abbr_(c ...interface{}) *web.Element {
	Abbr(c...)
	return EndAbbr()
}

// Abbr adds an <abbr> element to current parent with optional children or attributes
func Abbr(c ...interface{}) {
	v := web.NewElement("abbr", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndAbbr() *web.Element { return end("abbr") }

// Acronym_ same as Acronym but also ends the element
func Acronym_(c ...interface{}) *web.Element {
	Acronym(c...)
	return EndAcronym()
}

// Acronym adds an <acronym> element to current parent with optional children or attributes
func Acronym(c ...interface{}) {
	v := web.NewElement("acronym", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndAcronym() *web.Element { return end("acronym") }

// Address_ same as Address but also ends the element
func Address_(c ...interface{}) *web.Element {
	Address(c...)
	return EndAddress()
}

// Address adds an <address> element to current parent with optional children or attributes
func Address(c ...interface{}) {
	v := web.NewElement("address", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndAddress() *web.Element { return end("address") }

// Article_ same as Article but also ends the element
func Article_(c ...interface{}) *web.Element {
	Article(c...)
	return EndArticle()
}

// Article adds an <article> element to current parent with optional children or attributes
func Article(c ...interface{}) {
	v := web.NewElement("article", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndArticle() *web.Element { return end("article") }

// Aside_ same as Aside but also ends the element
func Aside_(c ...interface{}) *web.Element {
	Aside(c...)
	return EndAside()
}

// Aside adds an <aside> element to current parent with optional children or attributes
func Aside(c ...interface{}) {
	v := web.NewElement("aside", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndAside() *web.Element { return end("aside") }

// B_ same as B but also ends the element
func B_(c ...interface{}) *web.Element {
	B(c...)
	return EndB()
}

// B adds an <b> element to current parent with optional children or attributes
func B(c ...interface{}) {
	v := web.NewElement("b", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndB() *web.Element { return end("b") }

// Big_ same as Big but also ends the element
func Big_(c ...interface{}) *web.Element {
	Big(c...)
	return EndBig()
}

// Big adds an <big> element to current parent with optional children or attributes
func Big(c ...interface{}) {
	v := web.NewElement("big", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndBig() *web.Element { return end("big") }

// Blockquote_ same as Blockquote but also ends the element
func Blockquote_(c ...interface{}) *web.Element {
	Blockquote(c...)
	return EndBlockquote()
}

// Blockquote adds an <blockquote> element to current parent with optional children or attributes
func Blockquote(c ...interface{}) {
	v := web.NewElement("blockquote", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndBlockquote() *web.Element { return end("blockquote") }

// Body_ same as Body but also ends the element
func Body_(c ...interface{}) *web.Element {
	Body(c...)
	return EndBody()
}

// Body adds an <body> element to current parent with optional children or attributes
func Body(c ...interface{}) {
	v := web.NewElement("body", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndBody() *web.Element { return end("body") }

// Button_ same as Button but also ends the element
func Button_(c ...interface{}) *web.Element {
	Button(c...)
	return EndButton()
}

// Button adds an <button> element to current parent with optional children or attributes
func Button(c ...interface{}) {
	v := web.NewElement("button", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndButton() *web.Element { return end("button") }

// Cite_ same as Cite but also ends the element
func Cite_(c ...interface{}) *web.Element {
	Cite(c...)
	return EndCite()
}

// Cite adds an <cite> element to current parent with optional children or attributes
func Cite(c ...interface{}) {
	v := web.NewElement("cite", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndCite() *web.Element { return end("cite") }

// Code_ same as Code but also ends the element
func Code_(c ...interface{}) *web.Element {
	Code(c...)
	return EndCode()
}

// Code adds an <code> element to current parent with optional children or attributes
func Code(c ...interface{}) {
	v := web.NewElement("code", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndCode() *web.Element { return end("code") }

// Dd_ same as Dd but also ends the element
func Dd_(c ...interface{}) *web.Element {
	Dd(c...)
	return EndDd()
}

// Dd adds an <dd> element to current parent with optional children or attributes
func Dd(c ...interface{}) {
	v := web.NewElement("dd", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndDd() *web.Element { return end("dd") }

// Del_ same as Del but also ends the element
func Del_(c ...interface{}) *web.Element {
	Del(c...)
	return EndDel()
}

// Del adds an <del> element to current parent with optional children or attributes
func Del(c ...interface{}) {
	v := web.NewElement("del", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndDel() *web.Element { return end("del") }

// Details_ same as Details but also ends the element
func Details_(c ...interface{}) *web.Element {
	Details(c...)
	return EndDetails()
}

// Details adds an <details> element to current parent with optional children or attributes
func Details(c ...interface{}) {
	v := web.NewElement("details", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndDetails() *web.Element { return end("details") }

// Dfn_ same as Dfn but also ends the element
func Dfn_(c ...interface{}) *web.Element {
	Dfn(c...)
	return EndDfn()
}

// Dfn adds an <dfn> element to current parent with optional children or attributes
func Dfn(c ...interface{}) {
	v := web.NewElement("dfn", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndDfn() *web.Element { return end("dfn") }

// Div_ same as Div but also ends the element
func Div_(c ...interface{}) *web.Element {
	Div(c...)
	return EndDiv()
}

// Div adds an <div> element to current parent with optional children or attributes
func Div(c ...interface{}) {
	v := web.NewElement("div", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndDiv() *web.Element { return end("div") }

// Dl_ same as Dl but also ends the element
func Dl_(c ...interface{}) *web.Element {
	Dl(c...)
	return EndDl()
}

// Dl adds an <dl> element to current parent with optional children or attributes
func Dl(c ...interface{}) {
	v := web.NewElement("dl", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndDl() *web.Element { return end("dl") }

// Dt_ same as Dt but also ends the element
func Dt_(c ...interface{}) *web.Element {
	Dt(c...)
	return EndDt()
}

// Dt adds an <dt> element to current parent with optional children or attributes
func Dt(c ...interface{}) {
	v := web.NewElement("dt", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndDt() *web.Element { return end("dt") }

// Em_ same as Em but also ends the element
func Em_(c ...interface{}) *web.Element {
	Em(c...)
	return EndEm()
}

// Em adds an <em> element to current parent with optional children or attributes
func Em(c ...interface{}) {
	v := web.NewElement("em", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndEm() *web.Element { return end("em") }

// Footer_ same as Footer but also ends the element
func Footer_(c ...interface{}) *web.Element {
	Footer(c...)
	return EndFooter()
}

// Footer adds an <footer> element to current parent with optional children or attributes
func Footer(c ...interface{}) {
	v := web.NewElement("footer", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndFooter() *web.Element { return end("footer") }

// Form_ same as Form but also ends the element
func Form_(c ...interface{}) *web.Element {
	Form(c...)
	return EndForm()
}

// Form adds an <form> element to current parent with optional children or attributes
func Form(c ...interface{}) {
	v := web.NewElement("form", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndForm() *web.Element { return end("form") }

// Fieldset_ same as Fieldset but also ends the element
func Fieldset_(c ...interface{}) *web.Element {
	Fieldset(c...)
	return EndFieldset()
}

// Fieldset adds an <fieldset> element to current parent with optional children or attributes
func Fieldset(c ...interface{}) {
	v := web.NewElement("fieldset", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndFieldset() *web.Element { return end("fieldset") }

// H1_ same as H1 but also ends the element
func H1_(c ...interface{}) *web.Element {
	H1(c...)
	return EndH1()
}

// H1 adds an <h1> element to current parent with optional children or attributes
func H1(c ...interface{}) {
	v := web.NewElement("h1", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndH1() *web.Element { return end("h1") }

// H2_ same as H2 but also ends the element
func H2_(c ...interface{}) *web.Element {
	H2(c...)
	return EndH2()
}

// H2 adds an <h2> element to current parent with optional children or attributes
func H2(c ...interface{}) {
	v := web.NewElement("h2", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndH2() *web.Element { return end("h2") }

// H3_ same as H3 but also ends the element
func H3_(c ...interface{}) *web.Element {
	H3(c...)
	return EndH3()
}

// H3 adds an <h3> element to current parent with optional children or attributes
func H3(c ...interface{}) {
	v := web.NewElement("h3", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndH3() *web.Element { return end("h3") }

// H4_ same as H4 but also ends the element
func H4_(c ...interface{}) *web.Element {
	H4(c...)
	return EndH4()
}

// H4 adds an <h4> element to current parent with optional children or attributes
func H4(c ...interface{}) {
	v := web.NewElement("h4", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndH4() *web.Element { return end("h4") }

// H5_ same as H5 but also ends the element
func H5_(c ...interface{}) *web.Element {
	H5(c...)
	return EndH5()
}

// H5 adds an <h5> element to current parent with optional children or attributes
func H5(c ...interface{}) {
	v := web.NewElement("h5", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndH5() *web.Element { return end("h5") }

// H6_ same as H6 but also ends the element
func H6_(c ...interface{}) *web.Element {
	H6(c...)
	return EndH6()
}

// H6 adds an <h6> element to current parent with optional children or attributes
func H6(c ...interface{}) {
	v := web.NewElement("h6", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndH6() *web.Element { return end("h6") }

// Head_ same as Head but also ends the element
func Head_(c ...interface{}) *web.Element {
	Head(c...)
	return EndHead()
}

// Head adds an <head> element to current parent with optional children or attributes
func Head(c ...interface{}) {
	v := web.NewElement("head", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndHead() *web.Element { return end("head") }

// Header_ same as Header but also ends the element
func Header_(c ...interface{}) *web.Element {
	Header(c...)
	return EndHeader()
}

// Header adds an <header> element to current parent with optional children or attributes
func Header(c ...interface{}) {
	v := web.NewElement("header", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndHeader() *web.Element { return end("header") }

// Hgroup_ same as Hgroup but also ends the element
func Hgroup_(c ...interface{}) *web.Element {
	Hgroup(c...)
	return EndHgroup()
}

// Hgroup adds an <hgroup> element to current parent with optional children or attributes
func Hgroup(c ...interface{}) {
	v := web.NewElement("hgroup", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndHgroup() *web.Element { return end("hgroup") }

// Html_ same as Html but also ends the element
func Html_(c ...interface{}) *web.Element {
	Html(c...)
	return EndHtml()
}

// Html adds an <html> element to current parent with optional children or attributes
func Html(c ...interface{}) {
	v := web.NewElement("html", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndHtml() *web.Element { return end("html") }

// I_ same as I but also ends the element
func I_(c ...interface{}) *web.Element {
	I(c...)
	return EndI()
}

// I adds an <i> element to current parent with optional children or attributes
func I(c ...interface{}) {
	v := web.NewElement("i", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndI() *web.Element { return end("i") }

// Ins_ same as Ins but also ends the element
func Ins_(c ...interface{}) *web.Element {
	Ins(c...)
	return EndIns()
}

// Ins adds an <ins> element to current parent with optional children or attributes
func Ins(c ...interface{}) {
	v := web.NewElement("ins", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndIns() *web.Element { return end("ins") }

// Kbd_ same as Kbd but also ends the element
func Kbd_(c ...interface{}) *web.Element {
	Kbd(c...)
	return EndKbd()
}

// Kbd adds an <kbd> element to current parent with optional children or attributes
func Kbd(c ...interface{}) {
	v := web.NewElement("kbd", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndKbd() *web.Element { return end("kbd") }

// Label_ same as Label but also ends the element
func Label_(c ...interface{}) *web.Element {
	Label(c...)
	return EndLabel()
}

// Label adds an <label> element to current parent with optional children or attributes
func Label(c ...interface{}) {
	v := web.NewElement("label", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndLabel() *web.Element { return end("label") }

// Legend_ same as Legend but also ends the element
func Legend_(c ...interface{}) *web.Element {
	Legend(c...)
	return EndLegend()
}

// Legend adds an <legend> element to current parent with optional children or attributes
func Legend(c ...interface{}) {
	v := web.NewElement("legend", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndLegend() *web.Element { return end("legend") }

// Li_ same as Li but also ends the element
func Li_(c ...interface{}) *web.Element {
	Li(c...)
	return EndLi()
}

// Li adds an <li> element to current parent with optional children or attributes
func Li(c ...interface{}) {
	v := web.NewElement("li", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndLi() *web.Element { return end("li") }

// Mark_ same as Mark but also ends the element
func Mark_(c ...interface{}) *web.Element {
	Mark(c...)
	return EndMark()
}

// Mark adds an <mark> element to current parent with optional children or attributes
func Mark(c ...interface{}) {
	v := web.NewElement("mark", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndMark() *web.Element { return end("mark") }

// Menu_ same as Menu but also ends the element
func Menu_(c ...interface{}) *web.Element {
	Menu(c...)
	return EndMenu()
}

// Menu adds an <menu> element to current parent with optional children or attributes
func Menu(c ...interface{}) {
	v := web.NewElement("menu", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndMenu() *web.Element { return end("menu") }

// Meter_ same as Meter but also ends the element
func Meter_(c ...interface{}) *web.Element {
	Meter(c...)
	return EndMeter()
}

// Meter adds an <meter> element to current parent with optional children or attributes
func Meter(c ...interface{}) {
	v := web.NewElement("meter", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndMeter() *web.Element { return end("meter") }

// Nav_ same as Nav but also ends the element
func Nav_(c ...interface{}) *web.Element {
	Nav(c...)
	return EndNav()
}

// Nav adds an <nav> element to current parent with optional children or attributes
func Nav(c ...interface{}) {
	v := web.NewElement("nav", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndNav() *web.Element { return end("nav") }

// Noscript_ same as Noscript but also ends the element
func Noscript_(c ...interface{}) *web.Element {
	Noscript(c...)
	return EndNoscript()
}

// Noscript adds an <noscript> element to current parent with optional children or attributes
func Noscript(c ...interface{}) {
	v := web.NewElement("noscript", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndNoscript() *web.Element { return end("noscript") }

// Ol_ same as Ol but also ends the element
func Ol_(c ...interface{}) *web.Element {
	Ol(c...)
	return EndOl()
}

// Ol adds an <ol> element to current parent with optional children or attributes
func Ol(c ...interface{}) {
	v := web.NewElement("ol", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndOl() *web.Element { return end("ol") }

// Optgroup_ same as Optgroup but also ends the element
func Optgroup_(c ...interface{}) *web.Element {
	Optgroup(c...)
	return EndOptgroup()
}

// Optgroup adds an <optgroup> element to current parent with optional children or attributes
func Optgroup(c ...interface{}) {
	v := web.NewElement("optgroup", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndOptgroup() *web.Element { return end("optgroup") }

// Option_ same as Option but also ends the element
func Option_(c ...interface{}) *web.Element {
	Option(c...)
	return EndOption()
}

// Option adds an <option> element to current parent with optional children or attributes
func Option(c ...interface{}) {
	v := web.NewElement("option", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndOption() *web.Element { return end("option") }

// Output_ same as Output but also ends the element
func Output_(c ...interface{}) *web.Element {
	Output(c...)
	return EndOutput()
}

// Output adds an <output> element to current parent with optional children or attributes
func Output(c ...interface{}) {
	v := web.NewElement("output", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndOutput() *web.Element { return end("output") }

// P_ same as P but also ends the element
func P_(c ...interface{}) *web.Element {
	P(c...)
	return EndP()
}

// P adds an <p> element to current parent with optional children or attributes
func P(c ...interface{}) {
	v := web.NewElement("p", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndP() *web.Element { return end("p") }

// Pre_ same as Pre but also ends the element
func Pre_(c ...interface{}) *web.Element {
	Pre(c...)
	return EndPre()
}

// Pre adds an <pre> element to current parent with optional children or attributes
func Pre(c ...interface{}) {
	v := web.NewElement("pre", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndPre() *web.Element { return end("pre") }

// Quote_ same as Quote but also ends the element
func Quote_(c ...interface{}) *web.Element {
	Quote(c...)
	return EndQuote()
}

// Quote adds an <quote> element to current parent with optional children or attributes
func Quote(c ...interface{}) {
	v := web.NewElement("quote", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndQuote() *web.Element { return end("quote") }

// Script_ same as Script but also ends the element
func Script_(c ...interface{}) *web.Element {
	Script(c...)
	return EndScript()
}

// Script adds an <script> element to current parent with optional children or attributes
func Script(c ...interface{}) {
	v := web.NewElement("script", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndScript() *web.Element { return end("script") }

// Section_ same as Section but also ends the element
func Section_(c ...interface{}) *web.Element {
	Section(c...)
	return EndSection()
}

// Section adds an <section> element to current parent with optional children or attributes
func Section(c ...interface{}) {
	v := web.NewElement("section", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndSection() *web.Element { return end("section") }

// Select_ same as Select but also ends the element
func Select_(c ...interface{}) *web.Element {
	Select(c...)
	return EndSelect()
}

// Select adds an <select> element to current parent with optional children or attributes
func Select(c ...interface{}) {
	v := web.NewElement("select", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndSelect() *web.Element { return end("select") }

// Span_ same as Span but also ends the element
func Span_(c ...interface{}) *web.Element {
	Span(c...)
	return EndSpan()
}

// Span adds an <span> element to current parent with optional children or attributes
func Span(c ...interface{}) {
	v := web.NewElement("span", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndSpan() *web.Element { return end("span") }

// Style_ same as Style but also ends the element
func Style_(c ...interface{}) *web.Element {
	Style(c...)
	return EndStyle()
}

// Style adds an <style> element to current parent with optional children or attributes
func Style(c ...interface{}) {
	v := web.NewElement("style", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndStyle() *web.Element { return end("style") }

// Sub_ same as Sub but also ends the element
func Sub_(c ...interface{}) *web.Element {
	Sub(c...)
	return EndSub()
}

// Sub adds an <sub> element to current parent with optional children or attributes
func Sub(c ...interface{}) {
	v := web.NewElement("sub", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndSub() *web.Element { return end("sub") }

// Summary_ same as Summary but also ends the element
func Summary_(c ...interface{}) *web.Element {
	Summary(c...)
	return EndSummary()
}

// Summary adds an <summary> element to current parent with optional children or attributes
func Summary(c ...interface{}) {
	v := web.NewElement("summary", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndSummary() *web.Element { return end("summary") }

// Sup_ same as Sup but also ends the element
func Sup_(c ...interface{}) *web.Element {
	Sup(c...)
	return EndSup()
}

// Sup adds an <sup> element to current parent with optional children or attributes
func Sup(c ...interface{}) {
	v := web.NewElement("sup", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndSup() *web.Element { return end("sup") }

// Table_ same as Table but also ends the element
func Table_(c ...interface{}) *web.Element {
	Table(c...)
	return EndTable()
}

// Table adds an <table> element to current parent with optional children or attributes
func Table(c ...interface{}) {
	v := web.NewElement("table", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndTable() *web.Element { return end("table") }

// Tbody_ same as Tbody but also ends the element
func Tbody_(c ...interface{}) *web.Element {
	Tbody(c...)
	return EndTbody()
}

// Tbody adds an <tbody> element to current parent with optional children or attributes
func Tbody(c ...interface{}) {
	v := web.NewElement("tbody", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndTbody() *web.Element { return end("tbody") }

// Td_ same as Td but also ends the element
func Td_(c ...interface{}) *web.Element {
	Td(c...)
	return EndTd()
}

// Td adds an <td> element to current parent with optional children or attributes
func Td(c ...interface{}) {
	v := web.NewElement("td", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndTd() *web.Element { return end("td") }

// Textarea_ same as Textarea but also ends the element
func Textarea_(c ...interface{}) *web.Element {
	Textarea(c...)
	return EndTextarea()
}

// Textarea adds an <textarea> element to current parent with optional children or attributes
func Textarea(c ...interface{}) {
	v := web.NewElement("textarea", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndTextarea() *web.Element { return end("textarea") }

// Th_ same as Th but also ends the element
func Th_(c ...interface{}) *web.Element {
	Th(c...)
	return EndTh()
}

// Th adds an <th> element to current parent with optional children or attributes
func Th(c ...interface{}) {
	v := web.NewElement("th", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndTh() *web.Element { return end("th") }

// Thead_ same as Thead but also ends the element
func Thead_(c ...interface{}) *web.Element {
	Thead(c...)
	return EndThead()
}

// Thead adds an <thead> element to current parent with optional children or attributes
func Thead(c ...interface{}) {
	v := web.NewElement("thead", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndThead() *web.Element { return end("thead") }

// Title_ same as Title but also ends the element
func Title_(c ...interface{}) *web.Element {
	Title(c...)
	return EndTitle()
}

// Title adds an <title> element to current parent with optional children or attributes
func Title(c ...interface{}) {
	v := web.NewElement("title", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndTitle() *web.Element { return end("title") }

// Tr_ same as Tr but also ends the element
func Tr_(c ...interface{}) *web.Element {
	Tr(c...)
	return EndTr()
}

// Tr adds an <tr> element to current parent with optional children or attributes
func Tr(c ...interface{}) {
	v := web.NewElement("tr", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndTr() *web.Element { return end("tr") }

// U_ same as U but also ends the element
func U_(c ...interface{}) *web.Element {
	U(c...)
	return EndU()
}

// U adds an <u> element to current parent with optional children or attributes
func U(c ...interface{}) {
	v := web.NewElement("u", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndU() *web.Element { return end("u") }

// Ul_ same as Ul but also ends the element
func Ul_(c ...interface{}) *web.Element {
	Ul(c...)
	return EndUl()
}

// Ul adds an <ul> element to current parent with optional children or attributes
func Ul(c ...interface{}) {
	v := web.NewElement("ul", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndUl() *web.Element { return end("ul") }

// Var_ same as Var but also ends the element
func Var_(c ...interface{}) *web.Element {
	Var(c...)
	return EndVar()
}

// Var adds an <var> element to current parent with optional children or attributes
func Var(c ...interface{}) {
	v := web.NewElement("var", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndVar() *web.Element { return end("var") }

// Base adds the <base/> element to current parent with optional attributes
func Base(c ...interface{}) {
	v := web.NewSimpleElement("base", c...)
	parent().With(v)
}

// Br adds the <br/> element to current parent with optional attributes
func Br(c ...interface{}) {
	v := web.NewSimpleElement("br", c...)
	parent().With(v)
}

// Hr adds the <hr/> element to current parent with optional attributes
func Hr(c ...interface{}) {
	v := web.NewSimpleElement("hr", c...)
	parent().With(v)
}

// Img adds the <img/> element to current parent with optional attributes
func Img(c ...interface{}) {
	v := web.NewSimpleElement("img", c...)
	parent().With(v)
}

// Input adds the <input/> element to current parent with optional attributes
func Input(c ...interface{}) {
	v := web.NewSimpleElement("input", c...)
	parent().With(v)
}

// Keygen adds the <keygen/> element to current parent with optional attributes
func Keygen(c ...interface{}) {
	v := web.NewSimpleElement("keygen", c...)
	parent().With(v)
}

// Link adds the <link/> element to current parent with optional attributes
func Link(c ...interface{}) {
	v := web.NewSimpleElement("link", c...)
	parent().With(v)
}

// Meta adds the <meta/> element to current parent with optional attributes
func Meta(c ...interface{}) {
	v := web.NewSimpleElement("meta", c...)
	parent().With(v)
}

// Action returns attribute action="v"
func Action(v string) *web.Attribute {
	return &web.Attribute{Name: "action", Val: v}
}

// Alt returns attribute alt="v"
func Alt(v string) *web.Attribute {
	return &web.Attribute{Name: "alt", Val: v}
}

// Autocomplete returns attribute autocomplete="v"
func Autocomplete(v string) *web.Attribute {
	return &web.Attribute{Name: "autocomplete", Val: v}
}

// Charset returns attribute charset="v"
func Charset(v string) *web.Attribute {
	return &web.Attribute{Name: "charset", Val: v}
}

// Class returns attribute class="v"
func Class(v string) *web.Attribute {
	return &web.Attribute{Name: "class", Val: v}
}

// Content returns attribute content="v"
func Content(v string) *web.Attribute {
	return &web.Attribute{Name: "content", Val: v}
}

// Href returns attribute href="v"
func Href(v string) *web.Attribute {
	return &web.Attribute{Name: "href", Val: v}
}

// Id returns attribute id="v"
func Id(v string) *web.Attribute {
	return &web.Attribute{Name: "id", Val: v}
}

// Lang returns attribute lang="v"
func Lang(v string) *web.Attribute {
	return &web.Attribute{Name: "lang", Val: v}
}

// Method returns attribute method="v"
func Method(v string) *web.Attribute {
	return &web.Attribute{Name: "method", Val: v}
}

// Name returns attribute name="v"
func Name(v string) *web.Attribute {
	return &web.Attribute{Name: "name", Val: v}
}

// Rel returns attribute rel="v"
func Rel(v string) *web.Attribute {
	return &web.Attribute{Name: "rel", Val: v}
}

// Src returns attribute src="v"
func Src(v string) *web.Attribute {
	return &web.Attribute{Name: "src", Val: v}
}

// Tabindex returns attribute tabindex="v"
func Tabindex(v string) *web.Attribute {
	return &web.Attribute{Name: "tabindex", Val: v}
}

// Type returns attribute type="v"
func Type(v string) *web.Attribute {
	return &web.Attribute{Name: "type", Val: v}
}

// Value returns attribute value="v"
func Value(v string) *web.Attribute {
	return &web.Attribute{Name: "value", Val: v}
}

// OnBlur returns attribute onBlur="v"
func OnBlur(v string) *web.Attribute {
	return &web.Attribute{Name: "onBlur", Val: v}
}

// OnFocus returns attribute onFocus="v"
func OnFocus(v string) *web.Attribute {
	return &web.Attribute{Name: "onFocus", Val: v}
}

// OnLoad returns attribute onLoad="v"
func OnLoad(v string) *web.Attribute {
	return &web.Attribute{Name: "onLoad", Val: v}
}

// OnMouseDown returns attribute onMouseDown="v"
func OnMouseDown(v string) *web.Attribute {
	return &web.Attribute{Name: "onMouseDown", Val: v}
}

// OnMouseOut returns attribute onMouseOut="v"
func OnMouseOut(v string) *web.Attribute {
	return &web.Attribute{Name: "onMouseOut", Val: v}
}

// OnMouseOver returns attribute onMouseOver="v"
func OnMouseOver(v string) *web.Attribute {
	return &web.Attribute{Name: "onMouseOver", Val: v}
}

// OnMouseUp returns attribute onMouseUp="v"
func OnMouseUp(v string) *web.Attribute {
	return &web.Attribute{Name: "onMouseUp", Val: v}
}

// OnMouseWheel returns attribute onMouseWheel="v"
func OnMouseWheel(v string) *web.Attribute {
	return &web.Attribute{Name: "onMouseWheel", Val: v}
}
