package sweb

// generated by internal/dog.go
import "github.com/gregoryv/web"

// A adds an <a> element to current parent with optional children or attributes
func A_(c ...interface{}) {
	v := web.NewElement("a", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndA() *web.Element { return end("a") }

// Abbr adds an <abbr> element to current parent with optional children or attributes
func Abbr_(c ...interface{}) {
	v := web.NewElement("abbr", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndAbbr() *web.Element { return end("abbr") }

// Acronym adds an <acronym> element to current parent with optional children or attributes
func Acronym_(c ...interface{}) {
	v := web.NewElement("acronym", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndAcronym() *web.Element { return end("acronym") }

// Address adds an <address> element to current parent with optional children or attributes
func Address_(c ...interface{}) {
	v := web.NewElement("address", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndAddress() *web.Element { return end("address") }

// Article adds an <article> element to current parent with optional children or attributes
func Article_(c ...interface{}) {
	v := web.NewElement("article", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndArticle() *web.Element { return end("article") }

// Aside adds an <aside> element to current parent with optional children or attributes
func Aside_(c ...interface{}) {
	v := web.NewElement("aside", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndAside() *web.Element { return end("aside") }

// B adds an <b> element to current parent with optional children or attributes
func B_(c ...interface{}) {
	v := web.NewElement("b", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndB() *web.Element { return end("b") }

// Big adds an <big> element to current parent with optional children or attributes
func Big_(c ...interface{}) {
	v := web.NewElement("big", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndBig() *web.Element { return end("big") }

// Blockquote adds an <blockquote> element to current parent with optional children or attributes
func Blockquote_(c ...interface{}) {
	v := web.NewElement("blockquote", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndBlockquote() *web.Element { return end("blockquote") }

// Body adds an <body> element to current parent with optional children or attributes
func Body_(c ...interface{}) {
	v := web.NewElement("body", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndBody() *web.Element { return end("body") }

// Button adds an <button> element to current parent with optional children or attributes
func Button_(c ...interface{}) {
	v := web.NewElement("button", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndButton() *web.Element { return end("button") }

// Cite adds an <cite> element to current parent with optional children or attributes
func Cite_(c ...interface{}) {
	v := web.NewElement("cite", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndCite() *web.Element { return end("cite") }

// Code adds an <code> element to current parent with optional children or attributes
func Code_(c ...interface{}) {
	v := web.NewElement("code", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndCode() *web.Element { return end("code") }

// Dd adds an <dd> element to current parent with optional children or attributes
func Dd_(c ...interface{}) {
	v := web.NewElement("dd", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndDd() *web.Element { return end("dd") }

// Del adds an <del> element to current parent with optional children or attributes
func Del_(c ...interface{}) {
	v := web.NewElement("del", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndDel() *web.Element { return end("del") }

// Details adds an <details> element to current parent with optional children or attributes
func Details_(c ...interface{}) {
	v := web.NewElement("details", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndDetails() *web.Element { return end("details") }

// Dfn adds an <dfn> element to current parent with optional children or attributes
func Dfn_(c ...interface{}) {
	v := web.NewElement("dfn", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndDfn() *web.Element { return end("dfn") }

// Div adds an <div> element to current parent with optional children or attributes
func Div_(c ...interface{}) {
	v := web.NewElement("div", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndDiv() *web.Element { return end("div") }

// Dl adds an <dl> element to current parent with optional children or attributes
func Dl_(c ...interface{}) {
	v := web.NewElement("dl", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndDl() *web.Element { return end("dl") }

// Dt adds an <dt> element to current parent with optional children or attributes
func Dt_(c ...interface{}) {
	v := web.NewElement("dt", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndDt() *web.Element { return end("dt") }

// Em adds an <em> element to current parent with optional children or attributes
func Em_(c ...interface{}) {
	v := web.NewElement("em", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndEm() *web.Element { return end("em") }

// Footer adds an <footer> element to current parent with optional children or attributes
func Footer_(c ...interface{}) {
	v := web.NewElement("footer", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndFooter() *web.Element { return end("footer") }

// Form adds an <form> element to current parent with optional children or attributes
func Form_(c ...interface{}) {
	v := web.NewElement("form", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndForm() *web.Element { return end("form") }

// Fieldset adds an <fieldset> element to current parent with optional children or attributes
func Fieldset_(c ...interface{}) {
	v := web.NewElement("fieldset", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndFieldset() *web.Element { return end("fieldset") }

// H1 adds an <h1> element to current parent with optional children or attributes
func H1_(c ...interface{}) {
	v := web.NewElement("h1", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndH1() *web.Element { return end("h1") }

// H2 adds an <h2> element to current parent with optional children or attributes
func H2_(c ...interface{}) {
	v := web.NewElement("h2", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndH2() *web.Element { return end("h2") }

// H3 adds an <h3> element to current parent with optional children or attributes
func H3_(c ...interface{}) {
	v := web.NewElement("h3", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndH3() *web.Element { return end("h3") }

// H4 adds an <h4> element to current parent with optional children or attributes
func H4_(c ...interface{}) {
	v := web.NewElement("h4", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndH4() *web.Element { return end("h4") }

// H5 adds an <h5> element to current parent with optional children or attributes
func H5_(c ...interface{}) {
	v := web.NewElement("h5", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndH5() *web.Element { return end("h5") }

// H6 adds an <h6> element to current parent with optional children or attributes
func H6_(c ...interface{}) {
	v := web.NewElement("h6", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndH6() *web.Element { return end("h6") }

// Head adds an <head> element to current parent with optional children or attributes
func Head_(c ...interface{}) {
	v := web.NewElement("head", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndHead() *web.Element { return end("head") }

// Header adds an <header> element to current parent with optional children or attributes
func Header_(c ...interface{}) {
	v := web.NewElement("header", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndHeader() *web.Element { return end("header") }

// Hgroup adds an <hgroup> element to current parent with optional children or attributes
func Hgroup_(c ...interface{}) {
	v := web.NewElement("hgroup", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndHgroup() *web.Element { return end("hgroup") }

// Html adds an <html> element to current parent with optional children or attributes
func Html_(c ...interface{}) {
	v := web.NewElement("html", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndHtml() *web.Element { return end("html") }

// I adds an <i> element to current parent with optional children or attributes
func I_(c ...interface{}) {
	v := web.NewElement("i", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndI() *web.Element { return end("i") }

// Ins adds an <ins> element to current parent with optional children or attributes
func Ins_(c ...interface{}) {
	v := web.NewElement("ins", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndIns() *web.Element { return end("ins") }

// Kbd adds an <kbd> element to current parent with optional children or attributes
func Kbd_(c ...interface{}) {
	v := web.NewElement("kbd", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndKbd() *web.Element { return end("kbd") }

// Label adds an <label> element to current parent with optional children or attributes
func Label_(c ...interface{}) {
	v := web.NewElement("label", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndLabel() *web.Element { return end("label") }

// Legend adds an <legend> element to current parent with optional children or attributes
func Legend_(c ...interface{}) {
	v := web.NewElement("legend", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndLegend() *web.Element { return end("legend") }

// Li adds an <li> element to current parent with optional children or attributes
func Li_(c ...interface{}) {
	v := web.NewElement("li", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndLi() *web.Element { return end("li") }

// Mark adds an <mark> element to current parent with optional children or attributes
func Mark_(c ...interface{}) {
	v := web.NewElement("mark", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndMark() *web.Element { return end("mark") }

// Menu adds an <menu> element to current parent with optional children or attributes
func Menu_(c ...interface{}) {
	v := web.NewElement("menu", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndMenu() *web.Element { return end("menu") }

// Meter adds an <meter> element to current parent with optional children or attributes
func Meter_(c ...interface{}) {
	v := web.NewElement("meter", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndMeter() *web.Element { return end("meter") }

// Nav adds an <nav> element to current parent with optional children or attributes
func Nav_(c ...interface{}) {
	v := web.NewElement("nav", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndNav() *web.Element { return end("nav") }

// Noscript adds an <noscript> element to current parent with optional children or attributes
func Noscript_(c ...interface{}) {
	v := web.NewElement("noscript", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndNoscript() *web.Element { return end("noscript") }

// Ol adds an <ol> element to current parent with optional children or attributes
func Ol_(c ...interface{}) {
	v := web.NewElement("ol", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndOl() *web.Element { return end("ol") }

// Optgroup adds an <optgroup> element to current parent with optional children or attributes
func Optgroup_(c ...interface{}) {
	v := web.NewElement("optgroup", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndOptgroup() *web.Element { return end("optgroup") }

// Option adds an <option> element to current parent with optional children or attributes
func Option_(c ...interface{}) {
	v := web.NewElement("option", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndOption() *web.Element { return end("option") }

// Output adds an <output> element to current parent with optional children or attributes
func Output_(c ...interface{}) {
	v := web.NewElement("output", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndOutput() *web.Element { return end("output") }

// P adds an <p> element to current parent with optional children or attributes
func P_(c ...interface{}) {
	v := web.NewElement("p", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndP() *web.Element { return end("p") }

// Pre adds an <pre> element to current parent with optional children or attributes
func Pre_(c ...interface{}) {
	v := web.NewElement("pre", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndPre() *web.Element { return end("pre") }

// Quote adds an <quote> element to current parent with optional children or attributes
func Quote_(c ...interface{}) {
	v := web.NewElement("quote", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndQuote() *web.Element { return end("quote") }

// Script adds an <script> element to current parent with optional children or attributes
func Script_(c ...interface{}) {
	v := web.NewElement("script", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndScript() *web.Element { return end("script") }

// Section adds an <section> element to current parent with optional children or attributes
func Section_(c ...interface{}) {
	v := web.NewElement("section", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndSection() *web.Element { return end("section") }

// Select adds an <select> element to current parent with optional children or attributes
func Select_(c ...interface{}) {
	v := web.NewElement("select", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndSelect() *web.Element { return end("select") }

// Span adds an <span> element to current parent with optional children or attributes
func Span_(c ...interface{}) {
	v := web.NewElement("span", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndSpan() *web.Element { return end("span") }

// Style adds an <style> element to current parent with optional children or attributes
func Style_(c ...interface{}) {
	v := web.NewElement("style", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndStyle() *web.Element { return end("style") }

// Sub adds an <sub> element to current parent with optional children or attributes
func Sub_(c ...interface{}) {
	v := web.NewElement("sub", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndSub() *web.Element { return end("sub") }

// Summary adds an <summary> element to current parent with optional children or attributes
func Summary_(c ...interface{}) {
	v := web.NewElement("summary", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndSummary() *web.Element { return end("summary") }

// Sup adds an <sup> element to current parent with optional children or attributes
func Sup_(c ...interface{}) {
	v := web.NewElement("sup", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndSup() *web.Element { return end("sup") }

// Table adds an <table> element to current parent with optional children or attributes
func Table_(c ...interface{}) {
	v := web.NewElement("table", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndTable() *web.Element { return end("table") }

// Tbody adds an <tbody> element to current parent with optional children or attributes
func Tbody_(c ...interface{}) {
	v := web.NewElement("tbody", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndTbody() *web.Element { return end("tbody") }

// Td adds an <td> element to current parent with optional children or attributes
func Td_(c ...interface{}) {
	v := web.NewElement("td", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndTd() *web.Element { return end("td") }

// Textarea adds an <textarea> element to current parent with optional children or attributes
func Textarea_(c ...interface{}) {
	v := web.NewElement("textarea", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndTextarea() *web.Element { return end("textarea") }

// Th adds an <th> element to current parent with optional children or attributes
func Th_(c ...interface{}) {
	v := web.NewElement("th", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndTh() *web.Element { return end("th") }

// Thead adds an <thead> element to current parent with optional children or attributes
func Thead_(c ...interface{}) {
	v := web.NewElement("thead", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndThead() *web.Element { return end("thead") }

// Title adds an <title> element to current parent with optional children or attributes
func Title_(c ...interface{}) {
	v := web.NewElement("title", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndTitle() *web.Element { return end("title") }

// Tr adds an <tr> element to current parent with optional children or attributes
func Tr_(c ...interface{}) {
	v := web.NewElement("tr", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndTr() *web.Element { return end("tr") }

// U adds an <u> element to current parent with optional children or attributes
func U_(c ...interface{}) {
	v := web.NewElement("u", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndU() *web.Element { return end("u") }

// Ul adds an <ul> element to current parent with optional children or attributes
func Ul_(c ...interface{}) {
	v := web.NewElement("ul", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndUl() *web.Element { return end("ul") }

// Var adds an <var> element to current parent with optional children or attributes
func Var_(c ...interface{}) {
	v := web.NewElement("var", c...)
	p := parent()
	if p != nil {
		p.With(v)
	}
	push(v)
}

func EndVar() *web.Element { return end("var") }

// Base adds the <base/> element to current parent with optional attributes
func Base_(c ...interface{}) {
	v := web.NewSimpleElement("base", c...)
	parent().With(v)
}

// Br adds the <br/> element to current parent with optional attributes
func Br_(c ...interface{}) {
	v := web.NewSimpleElement("br", c...)
	parent().With(v)
}

// Hr adds the <hr/> element to current parent with optional attributes
func Hr_(c ...interface{}) {
	v := web.NewSimpleElement("hr", c...)
	parent().With(v)
}

// Img adds the <img/> element to current parent with optional attributes
func Img_(c ...interface{}) {
	v := web.NewSimpleElement("img", c...)
	parent().With(v)
}

// Input adds the <input/> element to current parent with optional attributes
func Input_(c ...interface{}) {
	v := web.NewSimpleElement("input", c...)
	parent().With(v)
}

// Keygen adds the <keygen/> element to current parent with optional attributes
func Keygen_(c ...interface{}) {
	v := web.NewSimpleElement("keygen", c...)
	parent().With(v)
}

// Link adds the <link/> element to current parent with optional attributes
func Link_(c ...interface{}) {
	v := web.NewSimpleElement("link", c...)
	parent().With(v)
}

// Meta adds the <meta/> element to current parent with optional attributes
func Meta_(c ...interface{}) {
	v := web.NewSimpleElement("meta", c...)
	parent().With(v)
}
