package main

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"os/exec"

	"github.com/gregoryv/nexus"
)

func generateSWeb() {
	var buf bytes.Buffer
	p, _ := nexus.NewPrinter(&buf)
	p.Println("package sweb")
	p.Println("// generated by internal/dog.go")
	p.Println(`import "github.com/gregoryv/web"`)
	p.Println()
	// With children
	swriteElements(p, complexElements...)
	p.Println()

	swriteSimpleElements(p, simpleElements...)
	p.Println()

	swriteAttributes(p, attributes...)

	// write result
	w, _ := os.Create("../sweb/generated.go")
	io.Copy(w, &buf)
	w.Close()

	// tidy output
	out, err := exec.Command("gofmt", "-w", w.Name()).CombinedOutput()
	if err != nil {
		fmt.Println(err, string(out))
		os.Exit(1)
	}
}

// ----------------------------------------

func swriteElements(p *nexus.Printer, tags ...string) {
	for _, tag := range tags {
		funcName := capitalize(tag)
		p.Printf(`
// %[1]s_ same as %[1]s but also ends the element
func %[1]s_(c ...interface{}) *web.Element{
    %[1]s(c...)
    return End%[1]s()
}
`, funcName)

		p.Printf(
			`// %[1]s adds an <%[2]s> element to current parent with optional children or attributes
func %[1]s(c ...interface{}) {
    v := web.NewElement("%[2]s", c...)
    p := parent()
    if p != nil {
       p.With(v)
    }
    push(v)
}

func End%[1]s() *web.Element { return end("%[2]s") }

`,
			funcName, tag,
		)
		p.Println()
	}
}

func swriteSimpleElements(p *nexus.Printer, tags ...string) {
	for _, tag := range tags {
		funcName := capitalize(tag)
		p.Printf(
			`// %[1]s adds the <%[2]s/> element to current parent with optional attributes
func %[1]s(c ...interface{}) {
    v := web.NewSimpleElement("%[2]s", c...)
    parent().With(v)
}`,
			funcName, tag,
		)
		p.Println()
	}
}

func swriteAttributes(p *nexus.Printer, names ...string) {
	for _, tag := range names {
		funcName := capitalize(tag)
		p.Printf(
			`// %[1]s returns attribute %[2]s="v"
func %[1]s(v string) *web.Attribute {
    return &web.Attribute{Name: %[2]q, Val: v}
}`,
			funcName, tag,
		)
		p.Println()
	}
}
