package main

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"

	"github.com/gregoryv/nexus"
)

//go:generate go run dog.go
func main() {
	w, _ := os.Create("../generated.go")
	defer w.Close()
	p, _ := nexus.NewPrinter(w)
	p.Println("package doctype")
	p.Println("// generated by internal/dog.go")
	// With children
	writeTags(p,
		"a",
		"abbr",
		"acronym",
		"address",
		"article",
		"aside",
		"b",
		"big",
		"blockquote",
		"body",
		"button",
		"cite",
		"code",
		"dd",
		"del",
		"details",
		"dfn",
		"div",
		"dl",
		"dt",
		"footer",
		"form",
		"h1",
		"h2",
		"h3",
		"h4",
		"h5",
		"h6",
		"head",
		"header",
		"hgroup",
		"i",
		"ins",
		"kbd",
		"label",
		"legend",
		"li",
		"mark",
		"menu",
		"meter",
		"nav",
		"noscript",
		"ol",
		"optgroup",
		"option",
		"output",
		"p",
		"pre",
		"quote",
		"script",
		"section",
		"select",
		"span",
		"style",
		"sub",
		"summary",
		"sup",
		"table",
		"tbody",
		"td",
		"textarea",
		"th",
		"thead",
		"title",
		"tr",
		"u",
		"ul",
		"var",
	)
	p.Println()

	writeSimpleTags(p,
		"base",
		"br",
		"hr",
		"img",
		"input",
		"keygen",
		"link",
		"meta",
	)
	p.Println()

	writeAttributes(p,
		"charset",
		"class",
		"content",
		"href",
		"id",
		"lang",
		"name",
		"rel",
		"src",
		"type",
	)
	// tidy output
	out, err := exec.Command("gofmt", "-w", w.Name()).CombinedOutput()
	if err != nil {
		fmt.Println(err, string(out))
		os.Exit(1)
	}
}

func writeTags(p *nexus.Printer, tags ...string) {
	for _, name := range tags {
		funcName := capitalize(name)
		p.Printf(
			`func %s(c ...interface{}) *Tag {
    return NewTag("%s", c...)
}`,
			funcName, name,
		)
		p.Println()
	}
}

func writeSimpleTags(p *nexus.Printer, tags ...string) {
	for _, name := range tags {
		funcName := capitalize(name)
		p.Printf(
			`func %s(c ...interface{}) *Tag {
    return NewSimpleTag("%s", c...)
}`,
			funcName, string(name),
		)
		p.Println()
	}
}

func writeAttributes(p *nexus.Printer, names ...string) {
	for _, name := range names {
		funcName := capitalize(name)
		p.Printf(
			`func %s(v string) *Attr { return &Attr{Name: %q, Val: v} }`,
			funcName, name,
		)
		p.Println()
	}
}

func capitalize(name string) string {
	funcName := []byte(name)
	funcName[0] = bytes.ToUpper(funcName)[0]
	return string(funcName)
}
