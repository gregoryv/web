package main

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"

	"github.com/gregoryv/nexus"
)

//go:generate go run dog.go
func main() {
	w, _ := os.Create("../generated.go")
	defer w.Close()
	p, _ := nexus.NewPrinter(w)
	p.Println("package doctype")
	p.Println("// generated by internal/dog.go")
	// With children
	writeTags(p,
		"head", "body", "p", "div", "section", "article", "h1", "h2", "h3", "h4",
	)
	p.Println()

	writeSimpleTags(p, "meta", "img")
	p.Println()

	writeAttributes(p, "src", "lang", "charset", "name", "content")
	// tidy output
	out, err := exec.Command("gofmt", "-w", w.Name()).CombinedOutput()
	if err != nil {
		fmt.Println(err, string(out))
		os.Exit(1)
	}
}

func writeTags(p *nexus.Printer, tags ...string) {
	for _, name := range tags {
		funcName := capitalize(name)
		p.Printf(
			`func %s(c ...interface{}) *Tag {
    return NewTag("%s", c...)
}`,
			funcName, name,
		)
		p.Println()
	}
}

func writeSimpleTags(p *nexus.Printer, tags ...string) {
	for _, name := range tags {
		funcName := capitalize(name)
		p.Printf(
			`func %s(c ...interface{}) *Tag {
    return NewSimpleTag("%s", c...)
}`,
			funcName, string(name),
		)
		p.Println()
	}
}

func writeAttributes(p *nexus.Printer, names ...string) {
	for _, name := range names {
		funcName := capitalize(name)
		p.Printf(
			`func %s(v string) *Attr { return &Attr{name: %q, val: v} }`,
			funcName, name,
		)
		p.Println()
	}
}

func capitalize(name string) string {
	funcName := []byte(name)
	funcName[0] = bytes.ToUpper(funcName)[0]
	return string(funcName)
}
